clear; close all;

jobManager = JobManager();

opt.maxtime = 5*60;
opt.verbose = 1;
opt.ftol_rel = 1e-6;
%opt.xtol_abs = 1e-7*ones(size(fem.mainDensities));
opt.algorithm = NLOPT_LD_MMA;

timeSteps = 1;
volumeFraction = 0.3;
radius = 0.01;
u_max = 5e-3;
P = 1;
k = 1e7;

void = Material(0, 1e6, 0.1, 3e-2, 0.4);
material_1 = Material(1.5e3, 1e3, 10, 5e9, 0.4);
material_2 = Material(1e3, 1e3, 10, 3e9, 0.4);
materials = [void, material_1];
%% Structured mesh
isnear = @(x, a) abs(x-a) < 1e-3;
width = 0.3;
height = 0.1;
mesh = StructuredMesh([121, width], [61, height]);
globalCoord = mesh.coordinates();
%%
topLeftNodes = find(globalCoord(1, :) == 0 & globalCoord(2, :) <= 0.1 &  ...
    globalCoord(2, :) >= 0.075);
bottomNodes = find(globalCoord(2, :) == 0);
bottomLeftNode = find(globalCoord(1, :) == 0 & globalCoord(2, :) == 0);
bottomRightNode = find(globalCoord(1, :) == 0.3 & globalCoord(2, :) == 0);
topRightNode = find(globalCoord(1, :) == 0.3 & globalCoord(2, :) == 0.1);


% Create boundary conditions
fixed = struct(...
    'nodes', topLeftNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [1, 1], ...
    'timeSteps', 1:timeSteps ...
);

symmetry = struct(...
    'nodes', bottomNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [0, 1], ...
    'timeSteps', 1:timeSteps ...
);

pointLoad = struct(...
    'nodes', topRightNode, ...
    'type', 'Neumann', ...
    'value', -P, ...
    'components', [0, 1], ...
    'timeSteps', 1:timeSteps ...
);

pointLoad2 = struct(...
    'nodes', bottomRightNode, ...
    'type', 'Neumann', ...
    'value', -P, ...
    'components', [1, 0], ...
    'timeSteps', 1:timeSteps ...
);


spring = struct(...
    'nodes', bottomLeftNode, ...
    'type', 'Robin', ...
    'value', k, ...
    'components', [1, 0], ...
    'timeSteps', 1:timeSteps ...
);

output = struct(...
    'nodes', bottomLeftNode, ...
    'type', 'dummy', ...
    'name', 'josse', ...
    'value', -1e3, ...
    'components', [1, 0], ...
    'timeSteps', 1:timeSteps ...
);

% Create body conditions
body = struct(...
    'type', 'main' ...
);

fem = OptMechFEMStructured(numel(materials), mesh, timeSteps, "plane stress");

fem.addBoundaryCondition(fixed);
fem.addBoundaryCondition(symmetry);
fem.addBoundaryCondition(pointLoad);
fem.addBoundaryCondition(spring);
fem.addBoundaryCondition(output);
fem.addBodyCondition(body);

fem.setMaterial(material_1);
[E, EDer, alpha, alphaDer] = MechSIMP(materials, 3, 3);
fem.addInterpFuncs(E, EDer, alpha, alphaDer);


options = struct(...
    'heavisideFilter', HeavisideFilter(2, 0.5, heavisideUpdater(1, 1)), ...
    'designFilter', true, ...
    'filterRadius', radius, ...
    'filterWeightFunction', @(dx, dy, dz) max(radius-sqrt(dx.^2+dy.^2+dz.^2), 0), ...
    'materials', materials, ...
    'plot', true ...
);

massLimit = volumeFraction * sum(fem.volumes*material_1.density);
% initial = zeros(size(fem.designPar));
% initial(1, :) = volumeFraction;
load("results/jobs2020-06-24 15_43_20-238/job1.mat");
initial = saveObj.result.finalSolution;

topOpt = FlexibilityProblem(fem, options, massLimit, u_max);

job1 = Job(topOpt, initial, opt);
jobManager.add(job1);
%%
options = struct(...
    'heavisideFilter', HeavisideFilter(4, 0.5, heavisideUpdater(1, 1)), ...
    'designFilter', true, ...
    'filterRadius', radius, ...
    'filterWeightFunction', @(dx, dy, dz) max(radius-sqrt(dx.^2+dy.^2+dz.^2), 0), ...
    'materials', materials, ...
    'plot', true ...
);
topOpt = FlexibilityProblem(fem, options, massLimit, u_max);

job2 = Job(topOpt, initial, opt);
job2.linkJob(job1);
jobManager.add(job2);
%%
options = struct(...
    'heavisideFilter', HeavisideFilter(8, 0.5, heavisideUpdater(1, 1)), ...
    'designFilter', true, ...
    'filterRadius', radius, ...
    'filterWeightFunction', @(dx, dy, dz) max(radius-sqrt(dx.^2+dy.^2+dz.^2), 0), ...
    'materials', materials, ...
    'plot', true ...
);
topOpt = FlexibilityProblem(fem, options, massLimit, u_max);

job3 = Job(topOpt, initial, opt);
job3.linkJob(job2);
jobManager.add(job3);
% Comment out the non-constrained flexibility problem, as it is too
% sensitive
%jobManager.add(job);
%%
jobManager.runAll();
%%
jobManager.plotAll();