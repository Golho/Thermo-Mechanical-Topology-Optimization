clear; close all;

timeSteps = 20;
volumeFraction = 0.2;
radius = 5e-5;
P = 1;
k = 250;
tFinal = 600;
u_max = 5e-5;

material_1 = Material(1, 1e6, 1e-3*eye(3),  1e3, 0.31, 0);
material_2 = Material(2, 2e6, 10*eye(3),    1e9, 0.31, 1.5e-5);
materials = [material_1, material_2];

%%
width = 5e-4;
height = 2.5e-4;
mesh = StructuredMesh([11, width], [6, height]);
globalCoord = mesh.coordinates();

topAndLeftNodes = find(globalCoord(1, :) == 0 | ...
    globalCoord(2, :) == height);
topCornerExpanded = find(globalCoord(2, :) == height & ...
    globalCoord(1, :) <= width/25);
bottomNodes = find(globalCoord(2, :) == 0);
rightCornerExpanded = find(globalCoord(1, :) == width & globalCoord(2, :) < height/25);

% Create boundary conditions
fixed = struct(...
    'nodes', topAndLeftNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [1, 1], ...
    'timeSteps', 1:timeSteps ...
);

symmetry = struct(...
    'nodes', bottomNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [0, 1], ...
    'timeSteps', 1:timeSteps ...
);

output = struct( ...
    'nodes', rightCornerExpanded, ...
    'type', 'dummy', ...
    'name', 'josse', ...
    'value', 1, ...
    'components', [1, 0], ...
    'timeSteps', timeSteps ...
);

tempPrescribed = struct( ...
    'nodes', rightCornerExpanded, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'timeSteps', 1:timeSteps ...
);

heatInput = struct(...
    'nodes', topCornerExpanded, ...
    'type', 'Neumann', ...
    'value', 1, ...
    'timeSteps', 1:timeSteps ...
);

% Create body conditions
body = struct(...
    'type', 'main' ...
);

mechFEM = OptMechFEMStructured(numel(materials), mesh, timeSteps, "plane stress");

mechFEM.addBoundaryCondition(fixed);
mechFEM.addBoundaryCondition(symmetry);
mechFEM.addBoundaryCondition(output);
mechFEM.addBodyCondition(body);

mechFEM.setMaterial(material_2);
[E, EDer, alpha, alphaDer] = MechSIMP(materials, 3, 3);
mechFEM.addInterpFuncs(E, EDer, alpha, alphaDer);

heatFEM = OptThermoMechStructured(mechFEM, numel(materials), mesh, tFinal, timeSteps, 1);

heatFEM.addBoundaryCondition(tempPrescribed);
heatFEM.addBoundaryCondition(heatInput);
heatFEM.addBodyCondition(body);

heatFEM.setMaterial(material_2);

[kappaF, kappaFDer, cp, cpDer] = HeatSIMP(materials, 3, 3);
heatFEM.addInterpFuncs(kappaF, kappaFDer, cp, cpDer);

options = struct(...
    'heavisideFilter', false, ...
    'designFilter', true, ...
    'filterRadius', radius, ...
    'filterWeightFunction', @(dx, dy, dz) max(radius-sqrt(dx.^2+dy.^2+dz.^2), 0), ...
    'materials', materials, ...
    'plot', false ...
);

coupledFEM = heatFEM;

%%
massLimit = volumeFraction * sum(heatFEM.volumes*material_2.density);
topOpt = ThermallyActuatedProblem(coupledFEM, options, massLimit);
initial = rand(size(coupledFEM.designPar));
g(1) = topOpt.objective(initial)

errors = topOpt.testGradients(initial, 1e-6)
assert(all(errors < 1e-5), "Sensitivities does not match");
%%
topOpt = ThermallyActuatedProblem2(coupledFEM, options);
initial = rand(size(coupledFEM.designPar));
g(1) = topOpt.objective(initial)

errors = topOpt.testGradients(initial, 1e-6)
assert(all(errors < 1e-5), "Sensitivities does not match");
%%

stiffFEM = OptMechFEMStructured(numel(materials), mesh, 1, "plane stress");

% Create boundary conditions
fixed = struct(...
    'nodes', topAndLeftNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [1, 1], ...
    'timeSteps', 1 ...
);

symmetry = struct(...
    'nodes', bottomNodes, ...
    'type', 'Dirichlet', ...
    'value', 0, ...
    'components', [0, 1], ...
    'timeSteps', 1 ...
);

output = struct( ...
    'nodes', rightCornerExpanded, ...
    'type', 'Neumann', ...
    'value', 1, ...
    'components', [1, 0], ...
    'timeSteps', 1 ...
);

stiffFEM.addBoundaryCondition(symmetry);
stiffFEM.addBoundaryCondition(fixed);
stiffFEM.addBoundaryCondition(output);
stiffFEM.addBodyCondition(body);

stiffFEM.setMaterial(material_2);
[E, EDer, alpha, alphaDer] = MechSIMP(materials, 3, 3);
stiffFEM.addInterpFuncs(E, EDer, alpha, alphaDer);

topOpt = ThermallyActuatedProblem3(coupledFEM, stiffFEM, options, massLimit, u_max);
initial = rand(size(coupledFEM.designPar));
g(1) = topOpt.objective(initial)

errors = topOpt.testGradients(initial, 1e-5)
assert(all(errors < 1e-5), "Sensitivities does not match");